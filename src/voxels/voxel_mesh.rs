use crate::rendering::mesh::Mesh;

use self::voxel_meshes::SHAPE_MESHES;

use super::voxel_shapes::VoxelShape;

#[rustfmt::skip]
mod voxel_meshes {
    use crate::{rendering::{mesh::Mesh}, voxels::voxel_mesh::VoxelMesh};

    lazy_static! {
        pub static ref CUBE: VoxelMesh = VoxelMesh {
            always: Mesh::new(),
            north:  Mesh::new().add_quad([[0.5, -0.5, 0.5], [0.5, 0.5, 0.5], [-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5]], [0.0, 0.0, 1.0]),
            south:  Mesh::new().add_quad([[-0.5, -0.5, -0.5], [-0.5, 0.5, -0.5], [0.5, -0.5, -0.5], [0.5, 0.5, -0.5]], [0.0, 0.0, -1.0]),
            east:   Mesh::new().add_quad([[0.5, -0.5, -0.5], [0.5, 0.5, -0.5], [0.5, -0.5, 0.5], [0.5, 0.5, 0.5]], [0.5, 0.0, 0.0]),
            west:   Mesh::new().add_quad([[-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5], [-0.5, -0.5, -0.5], [-0.5, 0.5, -0.5]], [-1.0, -0.0, 0.0]),
            top:    Mesh::new().add_quad([[-0.5, 0.5, -0.5], [-0.5, 0.5, 0.5], [0.5, 0.5, -0.5], [0.5, 0.5, 0.5]], [0.0, 1.0, 0.0]),
            bottom: Mesh::new().add_quad([[-0.5, -0.5, 0.5], [-0.5, -0.5, -0.5], [0.5, -0.5, 0.5], [0.5, -0.5, -0.5]], [0.0, -1.0, 0.0]),
        };

        pub static ref STAIR: VoxelMesh = VoxelMesh {
            always: Mesh::new()
                .add_quad([[-0.5, 0.0, -0.5], [-0.5, 0.0, 0.0], [0.5, 0.0, -0.5], [0.5, 0.0, 0.0]], [0.0, 1.0, 0.0])
                .add_quad([[-0.5, 0.0, 0.0], [-0.5, 0.5, 0.0], [0.5, 0.0, 0.0], [0.5, 0.5, 0.0]], [0.0, 0.0, -1.0]),
            north:  Mesh::new().add_quad([[0.5, -0.5, 0.5], [0.5, 0.5, 0.5], [-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5]], [0.0, 0.0, 1.0]),
            south:  Mesh::new().add_quad([[-0.5, -0.5, -0.5], [-0.5, 0.0, -0.5], [0.5, -0.5, -0.5], [0.5, 0.0, -0.5]], [0.0, 0.0, -1.0]),
            east:   Mesh::new()
                .add_custom(
                    vec![[0.5, -0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.0, 0.0], [0.5, 0.5, 0.0], [0.5, -0.5, -0.5], [0.5, 0.0, -0.5]], 
                    vec![4, 1, 0, 2, 3, 1, 4, 5, 2], [1.0, 0.0, 0.0]),
            west:   Mesh::new()
                .add_custom(
                    vec![[-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5], [-0.5, 0.0, 0.0], [-0.5, 0.5, 0.0], [-0.5, -0.5, -0.5], [-0.5, 0.0, -0.5]], 
                    vec![0, 1, 4, 1, 3, 2, 2, 5, 4], [-1.0, 0.0, 0.0]),
            top:    Mesh::new().add_quad([[-0.5, 0.5, 0.0], [-0.5, 0.5, 0.5], [0.5, 0.5, 0.0], [0.5, 0.5, 0.5]], [0.0, 1.0, 0.0]),
            bottom: Mesh::new().add_quad([[-0.5, -0.5, 0.5], [-0.5, -0.5, -0.5], [0.5, -0.5, 0.5], [0.5, -0.5, -0.5]], [0.0, -1.0, 0.0]),
        };

        pub static ref CORNER_STAIR: VoxelMesh = VoxelMesh {
            always: Mesh::new()
                .add_quad([[-0.5, 0.0, -0.5], [-0.5, 0.0, 0.0], [0.0, 0.0, -0.5], [0.0, 0.0, 0.0]], [0.0, 1.0, 0.0])
                .add_quad([[-0.5, 0.0, 0.0], [-0.5, 0.5, 0.0], [0.0, 0.0, 0.0], [0.0, 0.5, 0.0]], [0.0, 0.0, -1.0])
                .add_quad([[0.0, 0.0, 0.0], [0.0, 0.5, 0.0], [0.0, 0.0, -0.5], [0.0, 0.5, -0.5]], [-1.0, 0.0, 0.0]),
            north:  Mesh::new().add_quad([[0.5, -0.5, 0.5], [0.5, 0.5, 0.5], [-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5]], [0.0, 0.0, 1.0]),
            south:  Mesh::new()
                .add_custom(
                    vec![[-0.5, -0.5, -0.5], [-0.5, 0.0, -0.5], [0.5, -0.5, -0.5], [0.0, 0.0, -0.5], [0.0, 0.5, -0.5], [0.5, 0.5, -0.5]], 
                    vec![0, 1, 2, 2, 1, 3, 3, 4, 5, 3, 5, 2], [0.0, 0.0, -1.0]),
            east:   Mesh::new().add_quad([[0.5, -0.5, -0.5], [0.5, 0.5, -0.5], [0.5, -0.5, 0.5], [0.5, 0.5, 0.5]], [0.5, 0.0, 0.0]),
            west:   Mesh::new()
                .add_custom(
                    vec![[-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5], [-0.5, 0.0, 0.0], [-0.5, 0.5, 0.0], [-0.5, -0.5, -0.5], [-0.5, 0.0, -0.5]],
                    vec![0, 1, 2, 2, 1, 3, 0, 2, 4, 4, 2, 5], [-1.0, 0.0, 0.0]),
            top:    Mesh::new()
                .add_custom(
                    vec![[-0.5, 0.5, 0.0], [-0.5, 0.5, 0.5], [0.0, 0.5, 0.0], [0.5, 0.5, 0.5], [0.0, 0.5, -0.5], [0.5, 0.5, -0.5]], 
                    vec![1, 3, 5, 0, 1, 2, 4, 2, 5], [0.0, 1.0, 0.0]),
            bottom: Mesh::new().add_quad([[-0.5, -0.5, 0.5], [-0.5, -0.5, -0.5], [0.5, -0.5, 0.5], [0.5, -0.5, -0.5]], [0.0, -1.0, 0.0]),
        };

        pub static ref PRISM: VoxelMesh = VoxelMesh {
            always: Mesh::new().add_quad( [[-0.5, -0.5, -0.5], [-0.5, 0.5, 0.5], [0.5, -0.5, -0.5], [0.5, 0.5, 0.5]], [0.0, 0.7071, -0.7071]),
            north:  Mesh::new().add_quad( [[0.5, -0.5, 0.5], [0.5, 0.5, 0.5], [-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5]], [0.0, 0.0, 1.0]),
            south:   Mesh::new(),
            east:   Mesh::new().add_tri([[0.5, -0.5, -0.5], [0.5, 0.5, 0.5], [0.5, -0.5, 0.5]], [1.0, 0.0, 0.0]),
            west:   Mesh::new().add_tri([[-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5], [-0.5, -0.5, -0.5]], [-1.0, 0.0, 0.0]),
            top:     Mesh::new(),
            bottom: Mesh::new().add_quad([[-0.5, -0.5, 0.5], [-0.5, -0.5, -0.5], [0.5, -0.5, 0.5], [0.5, -0.5, -0.5]], [0.0, -1.0, 0.0]),
        };

        pub static ref SHAPE_MESHES: [&'static VoxelMesh; 8] = [&*CUBE, &*STAIR, &*CORNER_STAIR, &*CUBE, &*CUBE, &*CUBE, &*CUBE, &*PRISM];
    }
}

pub struct VoxelMesh {
    pub always: Mesh,
    pub north: Mesh,
    pub south: Mesh,
    pub east: Mesh,
    pub west: Mesh,
    pub top: Mesh,
    pub bottom: Mesh,
}

pub fn get_voxel_mesh(shape: VoxelShape) -> &'static VoxelMesh {
    SHAPE_MESHES[shape.extract_shape() as usize]
}
